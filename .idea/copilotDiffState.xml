<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/sanex/functions/_extract_and_clean_numeric.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/sanex/functions/_extract_and_clean_numeric.py" />
              <option name="originalContent" value="import pandas as pd&#10;import polars as pl&#10;from typing import Union&#10;&#10;DataFrameType = Union[pd.DataFrame, pl.DataFrame]&#10;&#10;def extract_and_clean_numeric(df: DataFrameType) -&gt; DataFrameType:&#10;    &quot;&quot;&quot;&#10;    Extracts numeric values from string entries in the DataFrame and converts them to numeric types.&#10;    Non-numeric entries are set to NaN.&#10;&#10;    Parameters:&#10;    df (DataFrameType): Input DataFrame.&#10;&#10;    Returns:&#10;    DataFrameType: DataFrame with numeric values extracted and cleaned.&#10;    &quot;&quot;&quot;&#10;    if isinstance(df, pd.DataFrame):&#10;        str_cols = df.select_dtypes(include=['object', 'string']).columns&#10;        for col in str_cols:&#10;            df[col] = pd.to_numeric(df[col].str.extract(r'([-+]?\d*\.?\d+)', expand=False), errors='coerce')&#10;        return df&#10;&#10;    elif isinstance(df, pl.DataFrame):&#10;        for col in df.columns:&#10;            if df[col].dtype == pl.String:&#10;                df = df.with_column(&#10;                    pl.col(col)&#10;                    .str.extract(r'([-+]?\d*\.?\d+)', 1)&#10;                    .cast(pl.Float64, strict=False)&#10;                    .alias(col)&#10;                )&#10;        return df&#10;&#10;    raise TypeError(&quot;Input must be a pandas or polars DataFrame.&quot;)" />
              <option name="updatedContent" value="import pandas as pd&#10;import polars as pl&#10;from typing import Union, List, Optional&#10;&#10;DataFrameType = Union[pd.DataFrame, pl.DataFrame]&#10;&#10;def extract_and_clean_numeric(df: DataFrameType, subset: Optional[List[str]] = None) -&gt; DataFrameType:&#10;    &quot;&quot;&quot;&#10;    Extracts numeric values from string entries in the DataFrame and converts them to numeric types.&#10;    Non-numeric entries are set to NaN.&#10;&#10;    Parameters:&#10;    df (DataFrameType): Input DataFrame.&#10;    subset (List[str], optional): List of column names to consider for numeric extraction.&#10;        Defaults to None (all columns).&#10;&#10;    Returns:&#10;    DataFrameType: DataFrame with numeric values extracted and cleaned.&#10;    &quot;&quot;&quot;&#10;    if isinstance(df, pd.DataFrame):&#10;        if subset is None:&#10;            str_cols = df.select_dtypes(include=['object', 'string']).columns&#10;        else:&#10;            str_cols = [col for col in subset if col in df.columns and df[col].dtype in ['object', 'string']]&#10;            &#10;        for col in str_cols:&#10;            df[col] = pd.to_numeric(df[col].str.extract(r'([-+]?\d*\.?\d+)', expand=False), errors='coerce')&#10;        return df&#10;&#10;    elif isinstance(df, pl.DataFrame):&#10;        if subset is None:&#10;            columns_to_process = [col for col in df.columns if df[col].dtype == pl.String]&#10;        else:&#10;            columns_to_process = [col for col in subset if col in df.columns and df[col].dtype == pl.String]&#10;            &#10;        for col in columns_to_process:&#10;            df = df.with_column(&#10;                pl.col(col)&#10;                .str.extract(r'([-+]?\d*\.?\d+)', 1)&#10;                .cast(pl.Float64, strict=False)&#10;                .alias(col)&#10;            )&#10;        return df&#10;&#10;    raise TypeError(&quot;Input must be a pandas or polars DataFrame.&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>